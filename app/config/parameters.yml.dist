# This file is a "template" of what your parameters.yml file should look like
# Set parameters here that may be different on each deployment target of the app, e.g. development, staging, production.
# http://symfony.com/doc/current/best_practices/configuration.html#infrastructure-related-configuration
parameters:
    database_host: 127.0.0.1
    database_port: ~
    database_name: symfony
    database_user: root
    database_password: vagrant
    # You should uncomment this if you want use pdo_sqlite
    # database_path: '%kernel.root_dir%/data.db3'

    mailer_transport: smtp
    mailer_host: 127.0.0.1
    mailer_user: ~
    mailer_password: ~
    locale: en
    api_name: 'Event Database'
    api_description: 'API for creating and querying events'
    # A secret key that's used to generate certain security-related tokens
    secret: ThisTokenIsNotSoSecretChangeIt

    cors_allow_origin: '*'

    jwt_private_key_path: '%kernel.project_dir%/var/jwt/private.pem'  # ssh private key path
    jwt_public_key_path: '%kernel.project_dir%/var/jwt/public.pem'  # ssh public key path
    jwt_key_pass_phrase: 'test'  # ssh key pass phrase
    jwt_token_ttl: 86400

    site_name: Event Database
    site_title: Event Database Admin

    admin.base_url: http://event-database-api.vm
    admin.files_path: '%kernel.project_dir%/web/files/'
    admin.files_url: files/
    admin.uploads_path: '%kernel.project_dir%/web/uploads/'
    admin.uploads_url: uploads/

    github_url: https://github.com/itk-event-database
    editor_url: http://editor.event-database-api.vm

    from_email_address: noreply@example.com
    from_email_name: Event Database

    view_timezone: GMT

    router.request_context.host: event-database-api.vm
    router.request_context.scheme: http

    liip_imagine_filter_sets:
        # use the default cache configuration
        cache: ~

        # the name of the "filter set"
        thumb:
            # adjust the image quality to 75%
            quality: 75

            # list of transformations to apply (the "filters")
            filters:
                # create a thumbnail: set size to 120x90 and use the "outbound" mode
                # to crop the image when the size ratio of the input differs
                thumbnail: { size: [120, 120], mode: outbound }

        800:
            # list of transformations to apply (the "filters")
            filters:
                downscale:
                    max: [800, 800]

        1000:
            # list of transformations to apply (the "filters")
            filters:
                downscale:
                    max: [1000, 1000]
